// px -> rem, base 16
// todo name
@function tf-size-from-base($size, $base: 16) {
  @return $size/$base;
}

// px (unitless) -> rem
@function tf-rem-size($size) {
  @return tf-size-from-base($size) * 1rem;
}

// px (unitless) -> em
@function tf-em-size($size) {
  @return tf-size-from-base($size) * 1em;
}

// px (unitless), px (unitless) -> unitless
@function tf-line-height($size-font, $size-line) {
  @return decimal-ceil($size-line / $size-font, 4);
}

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@function tf-asset($base, $type, $path) {
  @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function tf-image($path, $base: $base-url) {
  @return tf-asset($base, 'img/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function tf-font($path, $base: $base-url) {
  @return tf-asset($base, 'font/', $path);
}
